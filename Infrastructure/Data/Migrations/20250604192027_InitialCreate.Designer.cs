// <auto-generated />
using System;
using Infrastructure.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(TallerSurveyDbContext))]
    [Migration("20250604192027_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CategoriesCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("Now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("Now()");

                    b.HasKey("Id")
                        .HasName("pk_categories_catalog");

                    b.ToTable("categories_catalog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogOptionsId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogoptions_id");

                    b.Property<int>("CategoriesOptionsId")
                        .HasColumnType("integer")
                        .HasColumnName("categoriesoptions_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CatalogOptionsId");

                    b.HasIndex("CategoriesOptionsId");

                    b.ToTable("category_options", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Chapters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChapterNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("chapter_number");

                    b.Property<string>("ChapterTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chapter_title");

                    b.Property<string>("ComponentHTML")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componenthtml");

                    b.Property<string>("ComponentReact")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componentreact");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("survey_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OptionQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentOptionRes")
                        .HasColumnType("text")
                        .HasColumnName("comment_optionres");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("NumberOption")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numberoption");

                    b.Property<int>("OptionCatalogId")
                        .HasColumnType("integer")
                        .HasColumnName("optioncatalog_id");

                    b.Property<int>("OptionId")
                        .HasColumnType("integer")
                        .HasColumnName("option_id");

                    b.Property<int>("OptionQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("optionquestion_id");

                    b.Property<int>("SubquestionId")
                        .HasColumnType("integer")
                        .HasColumnName("subquestion_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("OptionCatalogId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionQuestionId");

                    b.HasIndex("SubquestionId");

                    b.ToTable("OptionQuestions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OptionsResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("optiontext");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("options_response", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<string>("CommentQuestion")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QuestionNumber")
                        .HasColumnType("text");

                    b.Property<string>("Questiontext")
                        .HasColumnType("text");

                    b.Property<string>("ResponseType")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Entities.SubQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentSubquestion")
                        .HasColumnType("text")
                        .HasColumnName("comment_subquestion");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("SubQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("subquestion_id");

                    b.Property<string>("SubQuestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subquestiontext");

                    b.Property<string>("SubquestionNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("subquestion_number");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("sub_questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SumaryOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codenumber");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("idquestion");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("id_survey");

                    b.Property<string>("Valuerta")
                        .HasColumnType("text")
                        .HasColumnName("valuerta");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("sumary_options", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Surveys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentHTML")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("componenthtml");

                    b.Property<string>("ComponentReact")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Instruction")
                        .HasColumnType("text")
                        .HasColumnName("instruction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("surveys", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryOptions", b =>
                {
                    b.HasOne("Domain.Entities.CategoriesCatalog", "CategoriesCatalog")
                        .WithMany("CategoryOptions")
                        .HasForeignKey("CatalogOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categoryoptions_categoriescatalog");

                    b.HasOne("Domain.Entities.OptionsResponse", "OptionsResponse")
                        .WithMany("CategoryOptions")
                        .HasForeignKey("CategoriesOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categoryoptions_optionsresponse");

                    b.Navigation("CategoriesCatalog");

                    b.Navigation("OptionsResponse");
                });

            modelBuilder.Entity("Domain.Entities.Chapters", b =>
                {
                    b.HasOne("Domain.Entities.Surveys", "Survey")
                        .WithMany("Chapters")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapters_survey");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Entities.OptionQuestions", b =>
                {
                    b.HasOne("Domain.Entities.CategoriesCatalog", "CategoriesCatalog")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("OptionCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OptionQuestions_CategoriesCatalog");

                    b.HasOne("Domain.Entities.OptionsResponse", "Optionresponse")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OptionQuestions_OptionsResponse");

                    b.HasOne("Domain.Entities.Questions", "Questions")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("OptionQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OptionQuestions_Questions");

                    b.HasOne("Domain.Entities.SubQuestions", "SubQuestions")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("SubquestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OptionQuestions_SubQuestions");

                    b.Navigation("CategoriesCatalog");

                    b.Navigation("Optionresponse");

                    b.Navigation("Questions");

                    b.Navigation("SubQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Questions", b =>
                {
                    b.HasOne("Domain.Entities.Chapters", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Domain.Entities.SubQuestions", b =>
                {
                    b.HasOne("Domain.Entities.Questions", "Question")
                        .WithMany("SubQuestions")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.SumaryOptions", b =>
                {
                    b.HasOne("Domain.Entities.Surveys", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Entities.CategoriesCatalog", b =>
                {
                    b.Navigation("CategoryOptions");

                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Chapters", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.OptionsResponse", b =>
                {
                    b.Navigation("CategoryOptions");

                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Questions", b =>
                {
                    b.Navigation("OptionQuestions");

                    b.Navigation("SubQuestions");
                });

            modelBuilder.Entity("Domain.Entities.SubQuestions", b =>
                {
                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Surveys", b =>
                {
                    b.Navigation("Chapters");
                });
#pragma warning restore 612, 618
        }
    }
}
